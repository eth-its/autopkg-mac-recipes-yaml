Description: Uploads the pkg to the JSS, and creates a Self-Service Policy available to members of a Testing group.
Identifier: com.github.eth-its-recipes.jamf.GPGSuite
MinimumVersion: "2.3"
ParentRecipe: com.github.kitzy.pkg.GPGSuite

Input:
  NAME: GPG Suite
  JSS_INVENTORY_NAME: GPG Keychain.app
  POLICY_NAME: "%NAME% (Testing)"
  SELFSERVICE_DISPLAY_NAME: "%NAME% (Testing)"
  PKG_CATEGORY: Tools & Accessories
  EXTENSION_ATTRIBUTE_NAME: GPG Suite Version
  EXTENSION_ATTRIBUTE_SCRIPT: VersionStringOverrideFullPath-EA.sh
  VERSION_STRING_TYPE: CFBundleShortVersionString
  VERSION_PLIST: /Library/Application Support/GPGTools/version.plist
  SELFSERVICE_DESCRIPTION: |
    GPG Suite is a set of tools for protecting files and emails. For full details see the [GPG Suite website](https://gpgtools.org).

    For new users it is recommended to view the [First Steps tutorial](https://gpgtools.tenderapp.com/kb/how-to/first-steps-where-do-i-start-where-do-i-begin-setup-gpgtools-create-a-new-key-your-first-encrypted-email).

    On macOS Big Sur and later versions of macOS, GPG Mail will be automatically enabled after the installation. **Note that GPG Mail requires a paid subscription.**

    On other versions of macOS, make sure to enable GPG Mail manually via **Mail > Preferences > General > Manage Plug-Insâ€¦** and activate **"GPGMailLoader"**.

    (In case you see more than one "GPGMailLoader", pick the newest one)

    Version: %version%
    Category: %PKG_CATEGORY%
  TEST_VERSION_INSTALLED_GROUP_NAME: "%NAME% test version installed"
  TEST_VERSION_INSTALLED_GROUP_TEMPLATE: SmartGroup-test-version-installed-app-EA.xml
  TESTING_GROUP_NAME: Testing
  TESTING_GROUP_TEMPLATE: StaticGroup-testing.xml
  POLICY_CATEGORY: Untested
  INSTALL_BUTTON_TEXT: "Install %version%"
  REINSTALL_BUTTON_TEXT: "Install %version%"
  POLICY_TEMPLATE: Policy-untested-selfservice.xml
  SELFSERVICE_ICON: GPG Keychain.png
  POLICY_RUN_COMMAND: "echo 'Installation of %NAME% complete'"
  UPDATE_PREDICATE: "pkg_uploaded != True"

Process:
  - Processor: com.github.grahampugh.recipes.commonprocessors/VersionRegexGenerator

  - Processor: com.github.grahampugh.jamf-upload.processors/JamfCategoryUploader
    Arguments:
      category_name: "%PKG_CATEGORY%"

  - Processor: com.github.grahampugh.jamf-upload.processors/JamfPackageUploader
    Arguments:
      pkg_category: "%PKG_CATEGORY%"

  - Processor: com.github.grahampugh.recipes.commonprocessors/WritePkgResultToJson

  - Processor: StopProcessingIf
    Arguments:
      predicate: "%UPDATE_PREDICATE%"

  - Processor: com.github.grahampugh.jamf-upload.processors/JamfExtensionAttributeUploader
    Arguments:
      ea_script_path: "%EXTENSION_ATTRIBUTE_SCRIPT%"
      ea_name: "%EXTENSION_ATTRIBUTE_NAME%"
      replace_ea: "True"

  - Processor: com.github.grahampugh.jamf-upload.processors/JamfCategoryUploader
    Arguments:
      category_name: "%POLICY_CATEGORY%"

  - Processor: com.github.grahampugh.jamf-upload.processors/JamfComputerGroupUploader
    Arguments:
      computergroup_template: "%TESTING_GROUP_TEMPLATE%"
      computergroup_name: "%TESTING_GROUP_NAME%"
      replace_group: "False"

  - Processor: com.github.grahampugh.jamf-upload.processors/JamfComputerGroupUploader
    Arguments:
      computergroup_name: "%TEST_VERSION_INSTALLED_GROUP_NAME%"
      computergroup_template: "%TEST_VERSION_INSTALLED_GROUP_TEMPLATE%"
      replace_group: "True"

  - Processor: com.github.grahampugh.jamf-upload.processors/JamfPolicyUploader
    Arguments:
      policy_template: "%POLICY_TEMPLATE%"
      policy_name: "%POLICY_NAME%"
      icon: "%SELFSERVICE_ICON%"
      replace_policy: "True"

  - Processor: com.github.grahampugh.recipes.postprocessors/LastRecipeRunResult
